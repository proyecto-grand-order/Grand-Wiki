"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_connector_1 = require("@isaaczm/api-connector");
const host = 'https://api.atlasacademy.io', cacheDuration = 20 * 1000;
let apiConnector = new api_connector_1.ApiConnector({
    host,
    region: api_connector_1.Region.JP,
    language: api_connector_1.Language.ENGLISH
});
let apiConnectorNA = new api_connector_1.ApiConnector({
    host,
    region: api_connector_1.Region.NA,
    language: api_connector_1.Language.DEFAULT
});
class Api {
    static init(region, language) {
        apiConnector = new api_connector_1.ApiConnector({ host, region, language });
    }
    static buff(id) {
        return apiConnector.buff(id, cacheDuration);
    }
    static commandCode(id) {
        return apiConnector.commandCode(id, cacheDuration);
    }
    static async commandCodeList() {
        return apiConnector.commandCodeList(-1);
    }
    static craftEssence(id) {
        return apiConnectorNA.craftEssence(id, cacheDuration) ? apiConnectorNA.craftEssence(id, cacheDuration) :
            apiConnector.craftEssence(id, cacheDuration);
    }
    static async craftEssenceList() {
        return apiConnector.craftEssenceList(-1);
    }
    static async enemy(id) {
        return apiConnector.enemy(id);
    }
    static func(id) {
        return apiConnector.func(id, cacheDuration);
    }
    static mysticCode(id) {
        return apiConnector.mysticCode(id, cacheDuration);
    }
    static async mysticCodeList() {
        return apiConnector.mysticCodeList(-1);
    }
    static noblePhantasm(id) {
        return apiConnector.noblePhantasm(id, cacheDuration);
    }
    static questPhase(id, phase) {
        return apiConnector.questPhase(id, phase, cacheDuration);
    }
    static servant(id) {
        return apiConnector.servant(id, cacheDuration);
    }
    static async servantList() {
        return apiConnector.servantList(-1);
    }
    static skill(id) {
        return apiConnector.skill(id, cacheDuration);
    }
    static skillNA(id) {
        return apiConnectorNA.skill(id, cacheDuration);
    }
    static traitList() {
        return apiConnectorNA.traitList(-1) ? apiConnectorNA.traitList(-1) : apiConnector.traitList(-1);
    }
    static searchBuffs(name, type) {
        return apiConnector.searchBuff({ name, type });
    }
    static searchEntity(name, type, className, gender, attribute, excludeCollectionNo, traits) {
        return apiConnector.searchEntity({
            name, type, className, gender, attribute, traits, excludeCollectionNo
        });
    }
    static searchFuncs(text, type, target, team) {
        return apiConnector.searchFunc({ text, type, target, team });
    }
}
exports.default = Api;
//# sourceMappingURL=data:application/json;base64,