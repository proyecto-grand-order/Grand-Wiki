"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeElements = exports.joinElements = exports.handleNewLine = exports.formatNumber = exports.asPercent = void 0;
function asPercent(value, pow) {
    if (typeof value === "string")
        return asPercent(parseInt(value), pow);
    const decimal = (value !== null && value !== void 0 ? value : 0) / Math.pow(10, pow);
    return `${decimal}%`;
}
exports.asPercent = asPercent;
function formatNumber(value) {
    return String(value).replace(/(.)(?=(\d{3})+$)/g, '$1,');
}
exports.formatNumber = formatNumber;
function handleNewLine(text) {
    if (!text)
        return "";
    return `<span>${mergeElements(text.split("\n"), "<br/>")}</span>`;
}
exports.handleNewLine = handleNewLine;
function joinElements(elements, separator) {
    const parts = [], pushElement = function (element) {
        if (element === undefined)
            return;
        if (typeof element === 'object') {
            parts.push(element);
            return;
        }
        if (parts.length === 0) {
            parts.push(element.toString());
            return;
        }
        const previous = parts[parts.length - 1];
        if (typeof previous !== 'string') {
            parts.push(element.toString());
            return;
        }
        parts[parts.length - 1] = previous + element.toString();
    };
    elements.forEach((element, index) => {
        if (index > 0)
            pushElement(separator);
        pushElement(element);
    });
    return parts;
}
exports.joinElements = joinElements;
function mergeElements(elements, seperator) {
    return `${joinElements(elements, seperator).map((element, index) => {
        return element;
    })}`;
}
exports.mergeElements = mergeElements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0cHV0SGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXRsYXMvSGVscGVyL091dHB1dEhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxTQUFnQixTQUFTLENBQUMsS0FBa0MsRUFBRSxHQUFXO0lBQ3JFLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtRQUN6QixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFM0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVqRCxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUM7QUFDekIsQ0FBQztBQVBELDhCQU9DO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLEtBQWE7SUFDdEMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFGRCxvQ0FFQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxJQUFhO0lBQ3ZDLElBQUksQ0FBQyxJQUFJO1FBQ0wsT0FBTyxFQUFFLENBQUM7SUFFZCxPQUFPLFNBQVMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUN0RSxDQUFDO0FBTEQsc0NBS0M7QUFFRCxTQUFnQixZQUFZLENBQUMsUUFBc0IsRUFBRSxTQUFxQjtJQUN0RSxNQUFNLEtBQUssR0FBaUIsRUFBRSxFQUMxQixXQUFXLEdBQUcsVUFBVSxPQUFtQjtRQUN2QyxJQUFJLE9BQU8sS0FBSyxTQUFTO1lBQ3JCLE9BQU87UUFFWCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUM3QixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BCLE9BQU87U0FDVjtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMvQixPQUFPO1NBQ1Y7UUFFRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUM5QixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLE9BQU87U0FDVjtRQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUQsQ0FBQyxDQUFDO0lBRU4sUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoQyxJQUFJLEtBQUssR0FBRyxDQUFDO1lBQ1QsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNCLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFqQ0Qsb0NBaUNDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFFBQXNCLEVBQUUsU0FBcUI7SUFDdkUsT0FBTyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQy9ELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDUixDQUFDO0FBSkQsc0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBSZW5kZXJhYmxlID0gKCBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgKVxuXG5leHBvcnQgZnVuY3Rpb24gYXNQZXJjZW50KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfCB1bmRlZmluZWQsIHBvdzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gYXNQZXJjZW50KHBhcnNlSW50KHZhbHVlKSwgcG93KTtcblxuICAgIGNvbnN0IGRlY2ltYWwgPSAodmFsdWUgPz8gMCkgLyBNYXRoLnBvdygxMCwgcG93KTtcblxuICAgIHJldHVybiBgJHtkZWNpbWFsfSVgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoLyguKSg/PShcXGR7M30pKyQpL2csICckMSwnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU5ld0xpbmUodGV4dD86IHN0cmluZyk6IFJlbmRlcmFibGUge1xuICAgIGlmICghdGV4dClcbiAgICAgICAgcmV0dXJuIFwiXCI7XG5cbiAgICByZXR1cm4gYDxzcGFuPiR7bWVyZ2VFbGVtZW50cyh0ZXh0LnNwbGl0KFwiXFxuXCIpLCBcIjxici8+XCIpfTwvc3Bhbj5gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pbkVsZW1lbnRzKGVsZW1lbnRzOiBSZW5kZXJhYmxlW10sIHNlcGFyYXRvcjogUmVuZGVyYWJsZSk6IFJlbmRlcmFibGVbXSB7XG4gICAgY29uc3QgcGFydHM6IFJlbmRlcmFibGVbXSA9IFtdLFxuICAgICAgICBwdXNoRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50OiBSZW5kZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChlbGVtZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChlbGVtZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPSBwcmV2aW91cyArIGVsZW1lbnQudG9TdHJpbmcoKTtcbiAgICAgICAgfTtcblxuICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA+IDApXG4gICAgICAgICAgICBwdXNoRWxlbWVudChzZXBhcmF0b3IpO1xuXG4gICAgICAgIHB1c2hFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcnRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VFbGVtZW50cyhlbGVtZW50czogUmVuZGVyYWJsZVtdLCBzZXBlcmF0b3I6IFJlbmRlcmFibGUpOiBSZW5kZXJhYmxlIHtcbiAgICByZXR1cm4gYCR7am9pbkVsZW1lbnRzKGVsZW1lbnRzLCBzZXBlcmF0b3IpLm1hcCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9KX1gXG59Il19