"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasFollowerDataVals = exports.getTargetVersionValues = exports.getTargetFollowerVersionValues = exports.getStaticFieldValues = exports.getStaticFieldNames = exports.getRelatedSkillIds = exports.getOverchargeDataValList = exports.getMutatingFieldValues = exports.getMutatingFieldNames = exports.getMixedDataValList = exports.getLevelDataValList = exports.getFollowerDataValList = exports.getDataValList = exports.funcUpdatesByOvercharge = exports.funcUpdatesByLevel = exports.describeMutators = void 0;
const api_connector_1 = require("@isaaczm/api-connector");
const FuncValueDescriptor_1 = __importDefault(require("../Descriptor/FuncValueDescriptor"));
const hasChangingDataVals = function (vals) {
    if (!vals.length)
        return false;
    let previous = vals[0];
    for (let i = 1; i < vals.length; i++) {
        if (JSON.stringify(previous) !== JSON.stringify(vals[i]))
            return true;
        previous = vals[i];
    }
    return false;
};
const hasUniqueValues = function (values) {
    if (values.length === 0)
        return false;
    return new Set(values.map(value => {
        if (Array.isArray(value))
            return value.join(',');
        return value;
    })).size > 1;
};
function describeMutators(region, func) {
    const dataVals = getDataValList(func), staticVals = getStaticFieldValues(dataVals), mutatingVals = getMutatingFieldValues(dataVals);
    return mutatingVals
        .map(mutatingVal => new FuncValueDescriptor_1.default().export(func, staticVals, mutatingVal));
}
exports.describeMutators = describeMutators;
function funcUpdatesByLevel(func) {
    return hasChangingDataVals(getLevelDataValList(func));
}
exports.funcUpdatesByLevel = funcUpdatesByLevel;
function funcUpdatesByOvercharge(func) {
    return hasChangingDataVals(getOverchargeDataValList(func));
}
exports.funcUpdatesByOvercharge = funcUpdatesByOvercharge;
function getDataValList(func) {
    const isLevel = funcUpdatesByLevel(func), isOvercharge = funcUpdatesByOvercharge(func);
    return isLevel && isOvercharge
        ? getMixedDataValList(func)
        : (isOvercharge ? getOverchargeDataValList(func) : getLevelDataValList(func));
}
exports.getDataValList = getDataValList;
function getFollowerDataValList(func) {
    var _a;
    return (_a = func.followerVals) !== null && _a !== void 0 ? _a : [];
}
exports.getFollowerDataValList = getFollowerDataValList;
function getLevelDataValList(func) {
    var _a;
    return (_a = func.svals) !== null && _a !== void 0 ? _a : [];
}
exports.getLevelDataValList = getLevelDataValList;
function getMixedDataValList(func) {
    const dataVals = [];
    for (let i = 1; i <= 5; i++) {
        let dataVal = getTargetVersionValues(func, i, i);
        if (dataVal !== undefined)
            dataVals.push(dataVal);
    }
    return dataVals;
}
exports.getMixedDataValList = getMixedDataValList;
function getMutatingFieldNames(vals) {
    return Object.values(api_connector_1.DataVal.DataValField).filter(field => {
        const values = vals.map(val => val[field]);
        return hasUniqueValues(values);
    });
}
exports.getMutatingFieldNames = getMutatingFieldNames;
function getMutatingFieldValues(vals) {
    if (!vals.length)
        return [];
    const fields = getMutatingFieldNames(vals), hasDependingVals = vals.filter(val => val.DependFuncVals !== undefined).length > 0, dependingVals = (hasDependingVals
        ? vals.map(val => { var _a; return ((_a = val.DependFuncVals) !== null && _a !== void 0 ? _a : {}); })
        : undefined), dependingMutatingValues = dependingVals ? getMutatingFieldValues(dependingVals) : [], staticValues = getStaticFieldValues(vals);
    return vals.map((val, index) => {
        const mutatingVals = {};
        for (let x in fields) {
            const fieldName = fields[x];
            // @ts-ignore
            mutatingVals[fieldName] = val[fieldName];
        }
        if (staticValues.DependFuncId && dependingMutatingValues[index]) {
            mutatingVals.DependFuncId = staticValues.DependFuncId;
            mutatingVals.DependFuncVals = dependingMutatingValues[index];
        }
        return mutatingVals;
    });
}
exports.getMutatingFieldValues = getMutatingFieldValues;
function getOverchargeDataValList(func) {
    const dataVals = [];
    for (let i = 1; i <= 5; i++) {
        let dataVal = getTargetVersionValues(func, 1, i);
        if (dataVal !== undefined)
            dataVals.push(dataVal);
    }
    return dataVals;
}
exports.getOverchargeDataValList = getOverchargeDataValList;
function getRelatedSkillIds(func) {
    if (func.funcType !== api_connector_1.Func.FuncType.ADD_STATE && func.funcType !== api_connector_1.Func.FuncType.ADD_STATE_SHORT)
        return [];
    const buff = func.buffs[0];
    if (buff.type === api_connector_1.Buff.BuffType.ATTACK_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.COMMANDATTACK_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.COMMANDATTACK_BEFORE_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.COMMANDCODEATTACK_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.DAMAGE_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.DEAD_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.DELAY_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.GUTS_FUNCTION
        || buff.type === api_connector_1.Buff.BuffType.SELFTURNEND_FUNCTION) {
        const dataVals = getDataValList(func), dataVal = dataVals[0];
        return typeof dataVal.Value === "number" ? [dataVal.Value] : [];
    }
    if (buff.type === api_connector_1.Buff.BuffType.NPATTACK_PREV_BUFF) {
        const dataVals = getDataValList(func), dataVal = dataVals[0];
        return typeof dataVal.SkillID === "number" ? [dataVal.SkillID] : [];
    }
    return [];
}
exports.getRelatedSkillIds = getRelatedSkillIds;
function getStaticFieldNames(vals) {
    return Object.values(api_connector_1.DataVal.DataValField).filter(field => {
        const values = vals.map(val => val[field]);
        return !hasUniqueValues(values);
    });
}
exports.getStaticFieldNames = getStaticFieldNames;
function getStaticFieldValues(vals) {
    if (!vals.length)
        return {};
    const fields = getStaticFieldNames(vals), staticVals = {}, hasDependingVals = vals.filter(val => val.DependFuncVals !== undefined).length > 0, dependingVals = (hasDependingVals
        ? vals.map(val => { var _a; return ((_a = val.DependFuncVals) !== null && _a !== void 0 ? _a : {}); })
        : undefined), dependingStaticValues = dependingVals ? getStaticFieldValues(dependingVals) : undefined;
    for (let x in fields) {
        // @ts-ignore
        staticVals[fields[x]] = vals[0][fields[x]];
    }
    if (hasDependingVals)
        staticVals.DependFuncVals = dependingStaticValues;
    return staticVals;
}
exports.getStaticFieldValues = getStaticFieldValues;
function getTargetFollowerVersionValues(func, level) {
    if (func.followerVals === undefined)
        return undefined;
    return func.followerVals[level - 1];
}
exports.getTargetFollowerVersionValues = getTargetFollowerVersionValues;
function getTargetVersionValues(func, level, overcharge = 1) {
    if (func.svals === undefined)
        return undefined;
    let dataVals;
    if (overcharge === 2 && func.svals2)
        dataVals = func.svals2;
    else if (overcharge === 3 && func.svals3)
        dataVals = func.svals3;
    else if (overcharge === 4 && func.svals4)
        dataVals = func.svals4;
    else if (overcharge === 5 && func.svals5)
        dataVals = func.svals5;
    else
        dataVals = func.svals;
    return dataVals[level - 1];
}
exports.getTargetVersionValues = getTargetVersionValues;
function hasFollowerDataVals(func) {
    return func.followerVals !== undefined;
}
exports.hasFollowerDataVals = hasFollowerDataVals;
//# sourceMappingURL=data:application/json;base64,