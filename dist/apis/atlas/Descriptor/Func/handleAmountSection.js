"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_connector_1 = require("@isaaczm/api-connector");
const BuffValueDescription_1 = __importDefault(require("../BuffValueDescription"));
const FuncValueDescriptor_1 = __importDefault(require("../FuncValueDescriptor"));
const SkillReferenceDescriptor_1 = __importDefault(require("../SkillReferenceDescriptor"));
const TraitDescription_1 = __importDefault(require("../TraitDescription"));
async function default_1(sections, func, dataVal, support) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const section = sections.amount, parts = section.parts;
    if (support) {
        parts.push('( Solo soporte:');
    }
    if (((_a = func.buffs[0]) === null || _a === void 0 ? void 0 : _a.type) === api_connector_1.Buff.BuffType.ADD_INDIVIDUALITY && typeof dataVal.Value === "number") {
        parts.push(new TraitDescription_1.default(dataVal.Value).export());
    }
    else if ((((_b = func.buffs[0]) === null || _b === void 0 ? void 0 : _b.type) === api_connector_1.Buff.BuffType.ATTACK_FUNCTION
        || ((_c = func.buffs[0]) === null || _c === void 0 ? void 0 : _c.type) === api_connector_1.Buff.BuffType.COMMANDATTACK_FUNCTION
        || ((_d = func.buffs[0]) === null || _d === void 0 ? void 0 : _d.type) === api_connector_1.Buff.BuffType.COMMANDATTACK_BEFORE_FUNCTION
        || ((_e = func.buffs[0]) === null || _e === void 0 ? void 0 : _e.type) === api_connector_1.Buff.BuffType.COMMANDCODEATTACK_FUNCTION
        || ((_f = func.buffs[0]) === null || _f === void 0 ? void 0 : _f.type) === api_connector_1.Buff.BuffType.DAMAGE_FUNCTION
        || ((_g = func.buffs[0]) === null || _g === void 0 ? void 0 : _g.type) === api_connector_1.Buff.BuffType.DEAD_FUNCTION
        || ((_h = func.buffs[0]) === null || _h === void 0 ? void 0 : _h.type) === api_connector_1.Buff.BuffType.DELAY_FUNCTION
        || ((_j = func.buffs[0]) === null || _j === void 0 ? void 0 : _j.type) === api_connector_1.Buff.BuffType.GUTS_FUNCTION
        || ((_k = func.buffs[0]) === null || _k === void 0 ? void 0 : _k.type) === api_connector_1.Buff.BuffType.SELFTURNEND_FUNCTION)
        && typeof dataVal.Value === "number") {
        section.preposition = undefined;
        parts.push('esto desencadena');
        parts.push(await new SkillReferenceDescriptor_1.default().export(dataVal.Value));
    }
    else if (func.funcType === api_connector_1.Func.FuncType.CARD_RESET && dataVal.Value) {
        section.preposition = undefined;
        parts.push(`${dataVal.Value} ${dataVal.Value > 1 ? 'veces' : 'vez'}`);
    }
    else if (func.funcType === api_connector_1.Func.FuncType.DAMAGE_NP_INDIVIDUAL_SUM) {
        parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal, true));
    }
    else if ((func.funcType === api_connector_1.Func.FuncType.ABSORB_NPTURN
        || func.funcType === api_connector_1.Func.FuncType.GAIN_HP_FROM_TARGETS
        || func.funcType === api_connector_1.Func.FuncType.GAIN_NP_FROM_TARGETS) && dataVal.DependFuncId) {
        if ((_l = dataVal.DependFuncVals) === null || _l === void 0 ? void 0 : _l.Value) {
            section.parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal, true));
        }
        else {
            section.showing = false;
        }
    }
    else if (dataVal.AddCount && (func.funcType === api_connector_1.Func.FuncType.EVENT_DROP_UP
        || func.funcType === api_connector_1.Func.FuncType.EXP_UP
        || func.funcType === api_connector_1.Func.FuncType.QP_UP
        || func.funcType === api_connector_1.Func.FuncType.USER_EQUIP_EXP_UP)) {
        parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal));
    }
    else if (dataVal.RateCount && (func.funcType === api_connector_1.Func.FuncType.QP_DROP_UP
        || func.funcType === api_connector_1.Func.FuncType.SERVANT_FRIENDSHIP_UP
        || func.funcType === api_connector_1.Func.FuncType.USER_EQUIP_EXP_UP)) {
        parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal));
    }
    else if (((_m = func.buffs[0]) === null || _m === void 0 ? void 0 : _m.type) === api_connector_1.Buff.BuffType.NPATTACK_PREV_BUFF) {
        if (typeof dataVal.SkillID !== "number") {
            section.showing = false;
            return;
        }
        section.preposition = undefined;
        parts.push('esto desencadena');
        parts.push(await new SkillReferenceDescriptor_1.default().export(dataVal.SkillID));
    }
    else if (func.buffs[0] && dataVal.Value) {
        parts.push(new BuffValueDescription_1.default().export(func.buffs[0], dataVal));
    }
    else if (dataVal.Value) {
        parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal, true));
    }
    else if (!dataVal.Value && dataVal.Correction) {
        section.preposition = 'con';
        parts.push('bonus');
        parts.push(new FuncValueDescriptor_1.default().export(func, dataVal, dataVal, true));
    }
    else {
        section.showing = false;
    }
    if (support) {
        parts.push(')');
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlQW1vdW50U2VjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcGlzL2F0bGFzL0Rlc2NyaXB0b3IvRnVuYy9oYW5kbGVBbW91bnRTZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQW1FO0FBQ25FLG1GQUEyRDtBQUMzRCxpRkFBeUQ7QUFDekQsMkZBQW1FO0FBQ25FLDJFQUFtRDtBQUdwQyxLQUFLLG9CQUFXLFFBQWdDLEVBQUUsSUFBZSxFQUFFLE9BQXdCLEVBQUUsT0FBaUI7O0lBQ3pILE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQzNCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBRTFCLElBQUksT0FBTyxFQUFFO1FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMENBQUUsSUFBSSxNQUFLLG9CQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixJQUFJLE9BQU8sT0FBTyxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDOUYsS0FBSyxDQUFDLElBQUksQ0FDTixJQUFJLDBCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FDL0MsQ0FBQztLQUNMO1NBQU0sSUFDSCxDQUNJLENBQUEsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQywwQ0FBRSxJQUFJLE1BQUssb0JBQUksQ0FBQyxRQUFRLENBQUMsZUFBZTtXQUNsRCxDQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMENBQUUsSUFBSSxNQUFLLG9CQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQjtXQUM1RCxDQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMENBQUUs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QUFLLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksOEJBQW9CLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3pFO1NBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUUsSUFBSSw2QkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBRSxDQUFBO0tBQy9FO1NBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUM3QyxPQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSw2QkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQzlFO1NBQU07UUFDSCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztLQUMzQjtJQUVELElBQUksT0FBTyxFQUFFO1FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtBQUNMLENBQUM7QUFyRkQsNEJBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCdWZmLCBEYXRhVmFsLCBGdW5jLCBSZWdpb259IGZyb20gXCJAaXNhYWN6bS9hcGktY29ubmVjdG9yXCI7XG5pbXBvcnQgQnVmZlZhbHVlRGVzY3JpcHRpb24gZnJvbSBcIi4uL0J1ZmZWYWx1ZURlc2NyaXB0aW9uXCI7XG5pbXBvcnQgRnVuY1ZhbHVlRGVzY3JpcHRvciBmcm9tIFwiLi4vRnVuY1ZhbHVlRGVzY3JpcHRvclwiO1xuaW1wb3J0IFNraWxsUmVmZXJlbmNlRGVzY3JpcHRvciBmcm9tIFwiLi4vU2tpbGxSZWZlcmVuY2VEZXNjcmlwdG9yXCI7XG5pbXBvcnQgVHJhaXREZXNjcmlwdGlvbiBmcm9tIFwiLi4vVHJhaXREZXNjcmlwdGlvblwiO1xuaW1wb3J0IHtGdW5jRGVzY3JpcHRvclNlY3Rpb25zfSBmcm9tIFwiLi9GdW5jRGVzY3JpcHRvclNlY3Rpb25zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChzZWN0aW9uczogRnVuY0Rlc2NyaXB0b3JTZWN0aW9ucywgZnVuYzogRnVuYy5GdW5jLCBkYXRhVmFsOiBEYXRhVmFsLkRhdGFWYWwsIHN1cHBvcnQ/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IHNlY3Rpb25zLmFtb3VudCxcbiAgICAgICAgcGFydHMgPSBzZWN0aW9uLnBhcnRzO1xuXG4gICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgcGFydHMucHVzaCgnKCBTb2xvIHNvcG9ydGU6Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZ1bmMuYnVmZnNbMF0/LnR5cGUgPT09IEJ1ZmYuQnVmZlR5cGUuQUREX0lORElWSURVQUxJVFkgJiYgdHlwZW9mIGRhdGFWYWwuVmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcGFydHMucHVzaChcbiAgICAgICAgICAgIG5ldyBUcmFpdERlc2NyaXB0aW9uKGRhdGFWYWwuVmFsdWUpLmV4cG9ydCgpXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKFxuICAgICAgICAgICAgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5BVFRBQ0tfRlVOQ1RJT05cbiAgICAgICAgICAgIHx8IGZ1bmMuYnVmZnNbMF0/LnR5cGUgPT09IEJ1ZmYuQnVmZlR5cGUuQ09NTUFOREFUVEFDS19GVU5DVElPTlxuICAgICAgICAgICAgfHwgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5DT01NQU5EQVRUQUNLX0JFRk9SRV9GVU5DVElPTlxuICAgICAgICAgICAgfHwgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5DT01NQU5EQ09ERUFUVEFDS19GVU5DVElPTlxuICAgICAgICAgICAgfHwgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5EQU1BR0VfRlVOQ1RJT05cbiAgICAgICAgICAgIHx8IGZ1bmMuYnVmZnNbMF0/LnR5cGUgPT09IEJ1ZmYuQnVmZlR5cGUuREVBRF9GVU5DVElPTlxuICAgICAgICAgICAgfHwgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5ERUxBWV9GVU5DVElPTlxuICAgICAgICAgICAgfHwgZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5HVVRTX0ZVTkNUSU9OXG4gICAgICAgICAgICB8fCBmdW5jLmJ1ZmZzWzBdPy50eXBlID09PSBCdWZmLkJ1ZmZUeXBlLlNFTEZUVVJORU5EX0ZVTkNUSU9OXG4gICAgICAgIClcbiAgICAgICAgJiYgdHlwZW9mIGRhdGFWYWwuVmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICApIHtcbiAgICAgICAgc2VjdGlvbi5wcmVwb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFydHMucHVzaCgnZXN0byBkZXNlbmNhZGVuYScpO1xuICAgICAgICBwYXJ0cy5wdXNoKGF3YWl0IG5ldyBTa2lsbFJlZmVyZW5jZURlc2NyaXB0b3IoKS5leHBvcnQoZGF0YVZhbC5WYWx1ZSkpO1xuICAgIH0gZWxzZSBpZiAoZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5DQVJEX1JFU0VUICYmIGRhdGFWYWwuVmFsdWUpIHtcbiAgICAgICAgc2VjdGlvbi5wcmVwb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFydHMucHVzaChgJHtkYXRhVmFsLlZhbHVlfSAke2RhdGFWYWwuVmFsdWUgPiAxID8gJ3ZlY2VzJyA6ICd2ZXonfWApO1xuICAgIH0gZWxzZSBpZiAoZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5EQU1BR0VfTlBfSU5ESVZJRFVBTF9TVU0pIHtcbiAgICAgICAgcGFydHMucHVzaChuZXcgRnVuY1ZhbHVlRGVzY3JpcHRvcigpLmV4cG9ydChmdW5jLCBkYXRhVmFsLCBkYXRhVmFsLCB0cnVlKSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKFxuICAgICAgICAgICAgZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5BQlNPUkJfTlBUVVJOXG4gICAgICAgICAgICB8fCBmdW5jLmZ1bmNUeXBlID09PSBGdW5jLkZ1bmNUeXBlLkdBSU5fSFBfRlJPTV9UQVJHRVRTXG4gICAgICAgICAgICB8fCBmdW5jLmZ1bmNUeXBlID09PSBGdW5jLkZ1bmNUeXBlLkdBSU5fTlBfRlJPTV9UQVJHRVRTXG4gICAgICAgICkgJiYgZGF0YVZhbC5EZXBlbmRGdW5jSWRcbiAgICApIHtcbiAgICAgICAgaWYgKGRhdGFWYWwuRGVwZW5kRnVuY1ZhbHM/LlZhbHVlKSB7XG4gICAgICAgICAgICBzZWN0aW9uLnBhcnRzLnB1c2gobmV3IEZ1bmNWYWx1ZURlc2NyaXB0b3IoKS5leHBvcnQoZnVuYywgZGF0YVZhbCwgZGF0YVZhbCwgdHJ1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VjdGlvbi5zaG93aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGFWYWwuQWRkQ291bnQgJiYgKFxuICAgICAgICBmdW5jLmZ1bmNUeXBlID09PSBGdW5jLkZ1bmNUeXBlLkVWRU5UX0RST1BfVVBcbiAgICAgICAgfHwgZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5FWFBfVVBcbiAgICAgICAgfHwgZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5RUF9VUFxuICAgICAgICB8fCBmdW5jLmZ1bmNUeXBlID09PSBGdW5jLkZ1bmNUeXBlLlVTRVJfRVFVSVBfRVhQX1VQXG4gICAgKSkge1xuICAgICAgICBwYXJ0cy5wdXNoKG5ldyBGdW5jVmFsdWVEZXNjcmlwdG9yKCkuZXhwb3J0KGZ1bmMsIGRhdGFWYWwsIGRhdGFWYWwpKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFWYWwuUmF0ZUNvdW50ICYmIChcbiAgICAgICAgZnVuYy5mdW5jVHlwZSA9PT0gRnVuYy5GdW5jVHlwZS5RUF9EUk9QX1VQXG4gICAgICAgIHx8IGZ1bmMuZnVuY1R5cGUgPT09IEZ1bmMuRnVuY1R5cGUuU0VSVkFOVF9GUklFTkRTSElQX1VQXG4gICAgICAgIHx8IGZ1bmMuZnVuY1R5cGUgPT09IEZ1bmMuRnVuY1R5cGUuVVNFUl9FUVVJUF9FWFBfVVBcbiAgICApKSB7XG4gICAgICAgIHBhcnRzLnB1c2gobmV3IEZ1bmNWYWx1ZURlc2NyaXB0b3IoKS5leHBvcnQoZnVuYywgZGF0YVZhbCwgZGF0YVZhbCkpO1xuICAgIH0gZWxzZSBpZiAoZnVuYy5idWZmc1swXT8udHlwZSA9PT0gQnVmZi5CdWZmVHlwZS5OUEFUVEFDS19QUkVWX0JVRkYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhVmFsLlNraWxsSUQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHNlY3Rpb24uc2hvd2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VjdGlvbi5wcmVwb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFydHMucHVzaCgnZXN0byBkZXNlbmNhZGVuYScpO1xuICAgICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICAgICAgYXdhaXQgbmV3IFNraWxsUmVmZXJlbmNlRGVzY3JpcHRvcigpLmV4cG9ydChkYXRhVmFsLlNraWxsSUQpXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmIChmdW5jLmJ1ZmZzWzBdICYmIGRhdGFWYWwuVmFsdWUpIHtcbiAgICAgICAgcGFydHMucHVzaChuZXcgQnVmZlZhbHVlRGVzY3JpcHRpb24oKS5leHBvcnQoZnVuYy5idWZmc1swXSwgZGF0YVZhbCkpO1xuICAgIH0gZWxzZSBpZiAoZGF0YVZhbC5WYWx1ZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKCBuZXcgRnVuY1ZhbHVlRGVzY3JpcHRvcigpLmV4cG9ydChmdW5jLCBkYXRhVmFsLCBkYXRhVmFsLCB0cnVlKSApXG4gICAgfSBlbHNlIGlmICghZGF0YVZhbC5WYWx1ZSAmJiBkYXRhVmFsLkNvcnJlY3Rpb24pIHtcbiAgICAgICAgc2VjdGlvbi5wcmVwb3NpdGlvbiA9ICdjb24nO1xuICAgICAgICBwYXJ0cy5wdXNoKCdib251cycpO1xuICAgICAgICBwYXJ0cy5wdXNoKG5ldyBGdW5jVmFsdWVEZXNjcmlwdG9yKCkuZXhwb3J0KGZ1bmMsIGRhdGFWYWwsIGRhdGFWYWwsIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWN0aW9uLnNob3dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICBwYXJ0cy5wdXNoKCcpJyk7XG4gICAgfVxufVxuIl19