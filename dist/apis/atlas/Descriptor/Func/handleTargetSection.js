"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetDescriptionsTranslate = exports.targetDescriptions = void 0;
const api_connector_1 = require("@isaaczm/api-connector");
const node_fetch_1 = __importDefault(require("node-fetch"));
exports.targetDescriptions = new Map([
    [api_connector_1.Func.FuncTargetType.SELF, 'self'],
    [api_connector_1.Func.FuncTargetType.PT_ONE, 'party member'],
    // PT_ANOTHER
    [api_connector_1.Func.FuncTargetType.PT_ALL, 'party'],
    [api_connector_1.Func.FuncTargetType.ENEMY, 'one enemy'],
    // ENEMY_ANOTHER
    [api_connector_1.Func.FuncTargetType.ENEMY_ALL, 'enemies'],
    [api_connector_1.Func.FuncTargetType.PT_FULL, 'party (including reserve)'],
    [api_connector_1.Func.FuncTargetType.ENEMY_FULL, 'enemies (including reserve)'],
    [api_connector_1.Func.FuncTargetType.PT_OTHER, 'party except self'],
    [api_connector_1.Func.FuncTargetType.PT_ONE_OTHER, 'other party members besides target'],
    [api_connector_1.Func.FuncTargetType.PT_RANDOM, 'random party member'],
    [api_connector_1.Func.FuncTargetType.ENEMY_OTHER, 'other enemies besides target'],
    [api_connector_1.Func.FuncTargetType.ENEMY_RANDOM, 'random enemy'],
    [api_connector_1.Func.FuncTargetType.PT_OTHER_FULL, 'party except self (including reserve)'],
    [api_connector_1.Func.FuncTargetType.ENEMY_OTHER_FULL, 'other enemies (including reserve)'],
    [api_connector_1.Func.FuncTargetType.PTSELECT_ONE_SUB, 'active party member and reserve party member'],
    [api_connector_1.Func.FuncTargetType.PTSELECT_SUB, 'reserve party member'],
    // PT_ONE_ANOTHER_RANDOM
    [api_connector_1.Func.FuncTargetType.PT_ONE_ANOTHER_RANDOM, 'other random party member'],
    [api_connector_1.Func.FuncTargetType.PT_SELF_ANOTHER_RANDOM, 'other random party member (except self)'],
    [api_connector_1.Func.FuncTargetType.ENEMY_ONE_ANOTHER_RANDOM, 'other random enemy'],
    [api_connector_1.Func.FuncTargetType.PT_SELF_ANOTHER_FIRST, 'first other party member (except self)'],
    // PT_SELF_BEFORE
    // PT_SELF_AFTER
    // PT_SELF_ANOTHER_LAST
    [api_connector_1.Func.FuncTargetType.COMMAND_TYPE_SELF_TREASURE_DEVICE, 'target noble phantasm version'],
]);
const targetDescriptionsTranslate = async () => {
    const req = await node_fetch_1.default('https://script.google.com/macros/s/AKfycbwZgw1OD4SwV5UHgUzWujOGkhpigDpplC5BqEPpiUWDRmunqO3P3ieLrDXoNNamOoujJw/exec');
    const res = await req.json();
    Object.entries(res.data[0]).forEach(([key, value]) => {
        //@ts-ignore
        exports.targetDescriptions.set(key, value);
    });
};
exports.targetDescriptionsTranslate = targetDescriptionsTranslate;
function default_1(sections, func, dataVal) {
    var _a;
    const section = sections.target, parts = section.parts;
    let targetType = func.funcTargetType;
    if (func.funcType === api_connector_1.Func.FuncType.ABSORB_NPTURN) {
        switch (dataVal.DependFuncId) {
            case 469:
                targetType = api_connector_1.Func.FuncTargetType.ENEMY_ALL;
                break;
            case 5061:
                targetType = api_connector_1.Func.FuncTargetType.PT_OTHER;
                break;
        }
    }
    else if (func.funcType === api_connector_1.Func.FuncType.GAIN_HP_FROM_TARGETS) {
        switch (dataVal.DependFuncId) {
            case 711:
                targetType = api_connector_1.Func.FuncTargetType.ENEMY_ALL;
                break;
            default:
                targetType = undefined;
                section.showing = false;
                break;
        }
    }
    else if (func.funcType === api_connector_1.Func.FuncType.GAIN_NP_FROM_TARGETS) {
        switch (dataVal.DependFuncId) {
            case 474:
                targetType = api_connector_1.Func.FuncTargetType.ENEMY_ALL;
                break;
            case 3962:
                targetType = api_connector_1.Func.FuncTargetType.PT_OTHER;
                break;
        }
    }
    if (targetType) {
        parts.push((_a = exports.targetDescriptions.get(targetType)) !== null && _a !== void 0 ? _a : targetType);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,