"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
class ApiMerged {
}
exports.default = ApiMerged;
ApiMerged.getNA = async () => {
    const req = await node_fetch_1.default('https://api.atlasacademy.io/export/NA/nice_servant.json');
    const res = await req.json();
    return res;
};
ApiMerged.getJP = async () => {
    const req = await node_fetch_1.default('https://api.atlasacademy.io/export/JP/nice_servant_lang_en.json');
    const res = req.json();
    return res;
};
ApiMerged.mergeApis = async () => {
    const na = await ApiMerged.getNA();
    const jp = await ApiMerged.getJP();
    for (const svt of jp) {
        const { id, skills, noblePhantasms } = svt;
        if (na.find(sv => sv.id === id)) {
            const svtNA = na.find(sv => sv.id === id);
            // Skills
            for (const skill of skills) {
                const skillNA = svtNA.skills.find(sk => sk.id === skill.id);
                if (skillNA) {
                    skill.name = skillNA.name;
                    skill.detail = skillNA.detail;
                }
            }
            // Noble Phantams
            for (const np of noblePhantasms) {
                const npNA = svtNA.noblePhantasms.find(n => n.id === np.id);
                if (npNA) {
                    np.name = npNA.name;
                    np.detail = npNA.detail;
                }
            }
        }
    }
    return jp;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc2VydmFudC5hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmVyL2luZGV4LnNlcnZhbnQuYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsNERBQStCO0FBRS9CLE1BQXFCLFNBQVM7O0FBQTlCLDRCQStDQztBQTlDVSxlQUFLLEdBQUcsS0FBSyxJQUFnQyxFQUFFO0lBQ2xELE1BQU0sR0FBRyxHQUFHLE1BQU0sb0JBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFBO0lBQ2xGLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQyxDQUFBO0FBRU0sZUFBSyxHQUFHLEtBQUssSUFBZ0MsRUFBRTtJQUNsRCxNQUFNLEdBQUcsR0FBRyxNQUFNLG9CQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQTtJQUMxRixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsT0FBTyxHQUFHLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFTSxtQkFBUyxHQUFHLEtBQUssSUFBK0IsRUFBRTtJQUNyRCxNQUFNLEVBQUUsR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNsQyxNQUFNLEVBQUUsR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUVsQyxLQUFLLE1BQU0sR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUNsQixNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFFM0MsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtZQUV6QyxTQUFTO1lBQ1QsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7Z0JBQ3hCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRTVELElBQUksT0FBTyxFQUFFO29CQUNULEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDMUIsS0FBSyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO2lCQUNqQzthQUNKO1lBRUQsaUJBQWlCO1lBQ2pCLEtBQUssTUFBTSxFQUFFLElBQUksY0FBYyxFQUFFO2dCQUM3QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUU1RCxJQUFHLElBQUksRUFBRTtvQkFDTCxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7b0JBQ25CLEVBQUUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtpQkFDMUI7YUFDSjtTQUNKO0tBQ0o7SUFFRCxPQUFPLEVBQUUsQ0FBQTtBQUNiLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZhbnQgfSBmcm9tIFwiQGlzYWFjem0vYXBpLWNvbm5lY3RvclwiO1xuaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaU1lcmdlZCB7XG4gICAgc3RhdGljIGdldE5BID0gYXN5bmMgKCk6IFByb21pc2U8U2VydmFudC5TZXJ2YW50W10+ID0+IHtcbiAgICAgICAgY29uc3QgcmVxID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmF0bGFzYWNhZGVteS5pby9leHBvcnQvTkEvbmljZV9zZXJ2YW50Lmpzb24nKVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXEuanNvbigpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRKUCA9IGFzeW5jICgpOiBQcm9taXNlPFNlcnZhbnQuU2VydmFudFtdPiA9PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5hdGxhc2FjYWRlbXkuaW8vZXhwb3J0L0pQL25pY2Vfc2VydmFudF9sYW5nX2VuLmpzb24nKVxuICAgICAgICBjb25zdCByZXMgPSByZXEuanNvbigpO1xuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuXG4gICAgc3RhdGljIG1lcmdlQXBpcyA9IGFzeW5jICgpOlByb21pc2U8U2VydmFudC5TZXJ2YW50W10+ID0+IHtcbiAgICAgICAgY29uc3QgbmEgPSBhd2FpdCBBcGlNZXJnZWQuZ2V0TkEoKVxuICAgICAgICBjb25zdCBqcCA9IGF3YWl0IEFwaU1lcmdlZC5nZXRKUCgpXG4gICAgXG4gICAgICAgIGZvciAoY29uc3Qgc3Z0IG9mIGpwKSB7XG4gICAgICAgICAgICBjb25zdCB7IGlkLCBza2lsbHMsIG5vYmxlUGhhbnRhc21zIH0gPSBzdnQ7XG4gICAgXG4gICAgICAgICAgICBpZiAobmEuZmluZChzdiA9PiBzdi5pZCA9PT0gaWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Z0TkEgPSBuYS5maW5kKHN2ID0+IHN2LmlkID09PSBpZClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTa2lsbHNcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHNraWxscykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBza2lsbE5BID0gc3Z0TkEuc2tpbGxzLmZpbmQoc2sgPT4gc2suaWQgPT09IHNraWxsLmlkKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNraWxsTkEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsLm5hbWUgPSBza2lsbE5BLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBza2lsbC5kZXRhaWwgPSBza2lsbE5BLmRldGFpbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vYmxlIFBoYW50YW1zXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBucCBvZiBub2JsZVBoYW50YXNtcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBucE5BID0gc3Z0TkEubm9ibGVQaGFudGFzbXMuZmluZChuID0+IG4uaWQgPT09IG5wLmlkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihucE5BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBucC5uYW1lID0gbnBOQS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBucC5kZXRhaWwgPSBucE5BLmRldGFpbFxuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4ganBcbiAgICB9XG59Il19